
precision highp float;

uniform vec2 ComplexConstant;
uniform float fViewportSize;
uniform float blend;
  
void main(void) 
{
   const int nMaxIter = 128;
   
   float R = 3.5 * (gl_FragCoord.x - fViewportSize / 2.0)  / fViewportSize - 0.25;
   float I = 3.5 * (gl_FragCoord.y - fViewportSize / 2.0)  / fViewportSize;
   
   
   float Real0 = R;
   float Imag0 = I;
   
   int LastIter;
   float fRealConstant = blend * ComplexConstant.x + (1.0 - blend ) * Real0;
   float fImagConstant = blend * ComplexConstant.y + (1.0 - blend ) * Imag0;
   
   float R2 = R*R; 
   float I2 = I*I;
   
   for(int iter = 0; iter < nMaxIter; iter ++)
   {
		I=(R+R)*I + fImagConstant;
		R=R2-I2 + fRealConstant;
			
		R2=R*R;
		I2=I*I;
		
		LastIter = iter ;

		if( R2+I2 > 4.0 ) 
			break;
	}
	
   if (LastIter  == nMaxIter-1) 
		gl_FragColor = vec4(0., 0., 0., 1.);
   else
   {
    float fValue = mod(float(LastIter),2.0);
	float angle = 2.0 * 3.14 * float(LastIter) / float(nMaxIter) ;
	gl_FragColor = vec4(1.0 - (0.5+0.5*cos(angle*2.0)),
						1.0 - (0.5+0.5*cos(angle*3.0)),
						1.0 - (0.5+0.5*cos(angle*5.0)), 
						1.);
   }
}